<%= labelled_fields_for :issue, @issue do |f| %>
  <%= call_hook(:view_issues_form_details_top, { :issue => @issue, :form => f }) %>
  <%= hidden_field_tag 'form_update_triggered_by', '' %>
  <%= hidden_field_tag 'back_url', params[:back_url], :id => nil if params[:back_url].present? %>

  <div id="attributes" class="attributes" style="display: grid;">

    <% if Setting['plugin_redmine_customize_core_fields']['display_custom_fields_first'] == 'true'
         sort_index = +1
       else
         sort_index = -1
       end %>

    <div style="grid-row: 2;">
      <% if @issue.safe_attribute? 'custom_field_values' %>
        <%= render :partial => 'issues/form_custom_fields' %>
      <% end %>
    </div>

    <div style="grid-row: <%=2+sort_index%>;">

      <% CoreField.sorted.each do |core_field|
        case core_field.identifier

        when 'is_private' %>

          <% if @issue.safe_attribute? 'is_private' %>
            <p id="issue_is_private_wrap">
              <%= f.check_box :is_private, :no_label => true %>
              <label class="inline" for="issue_is_private" id="issue_is_private_label"><%= l(:field_is_private) %></label>
            </p>
          <% end %>

        <% when 'project_id' %>

          <% projects = projects_for_select(@issue) %>
          <% if (@issue.safe_attribute?('project_id') || @issue.project_id_changed?) && (@project.nil? || projects.length > 1 || @issue.copy?) %>
            <p><%= f.select :project_id, project_tree_options_for_select(projects, :selected => @issue.project), { :required => true },
                            :onchange => "updateIssueFrom('#{escape_javascript update_issue_form_path(@project, @issue)}', this)" %></p>
          <% end %>

        <% when 'tracker_id' %>

          <% if @issue.safe_attribute?('tracker_id') || (@issue.persisted? && @issue.tracker_id_changed?) %>
            <p><%= f.select :tracker_id, trackers_options_for_select(@issue), { :required => true },
                            :onchange => "updateIssueFrom('#{escape_javascript update_issue_form_path(@project, @issue)}', this)",
                            :title => @issue.tracker.description %></p>
          <% end %>

        <% when 'subject' %>

          <% if @issue.safe_attribute? 'subject' %>
            <p><%= f.text_field :subject, :size => 80, :maxlength => 255, :required => true %></p>
          <% end %>

        <% when 'description' %>

          <% if @issue.safe_attribute? 'description' %>
            <p>
              <%= f.label_for_field :description, :required => @issue.required_attribute?('description') %>
              <%= link_to_function content_tag(:span, l(:button_edit), :class => 'icon icon-edit'), '$(this).hide(); $("#issue_description_and_toolbar").show()' unless @issue.new_record? %>
              <%= content_tag 'span', :id => "issue_description_and_toolbar", :style => (@issue.new_record? ? nil : 'display:none') do %>
                <%= f.text_area :description,
                                :cols => 60,
                                :rows => [[10, @issue.description.to_s.length / 50].max, 20].min,
                                :accesskey => accesskey(:edit),
                                :class => 'wiki-edit',
                                :no_label => true %>
              <% end %>
            </p>
            <%= wikitoolbar_for 'issue_description', preview_issue_path(:project_id => @issue.project, :issue_id => @issue.id) %>
          <% end %>

        <% when 'status_id' %>

          <% if @issue.safe_attribute?('status_id') && @allowed_statuses.present? %>
            <p><%= f.select :status_id, (@allowed_statuses.collect { |p| [p.name, p.id] }), { :required => true },
                            :onchange => "updateIssueFrom('#{escape_javascript update_issue_form_path(@project, @issue)}', this)" %></p>
            <%= hidden_field_tag 'was_default_status', @issue.status_id, :id => nil if @issue.status == @issue.default_status %>
          <% else %>
            <p><label><%= l(:field_status) %></label> <%= @issue.status %></p>
          <% end %>

        <% when 'priority_id' %>

          <% if @issue.safe_attribute? 'priority_id' %>
            <p><%= f.select :priority_id, (@priorities.collect { |p| [p.name, p.id] }), { :required => true } %></p>
          <% end %>

        <% when 'assigned_to_id' %>

          <% if @issue.safe_attribute? 'assigned_to_id' %>
            <p>
              <%= f.select :assigned_to_id, principals_options_for_select(@issue.assignable_users, @issue.assigned_to), :include_blank => true, :required => @issue.required_attribute?('assigned_to_id') %>
              <% if @issue.assignable_users.include?(User.current) %>
                <a class="assign-to-me-link<%= ' hidden' if @issue.assigned_to_id == User.current.id %>" href="#" data-id="<%= User.current.id %>"><%= l(:label_assign_to_me) %></a>
              <% end %>
            </p>
          <% end %>

        <% when 'category_id' %>

          <% if @issue.safe_attribute?('category_id') && @issue.project.issue_categories.any? %>
            <p><%= f.select :category_id, (@issue.project.issue_categories.collect { |c| [c.name, c.id] }), { :include_blank => true, :required => @issue.required_attribute?('category_id') }, :onchange => ("updateIssueFrom('#{escape_javascript update_issue_form_path(@project, @issue)}', this)" if @issue.new_record?) %>
              <%= link_to(l(:label_issue_category_new),
                          new_project_issue_category_path(@issue.project),
                          :remote => true,
                          :method => 'get',
                          :title => l(:label_issue_category_new),
                          :tabindex => 200,
                          :class => 'icon-only icon-add'
                  ) if User.current.allowed_to?(:manage_categories, @issue.project) %></p>
          <% end %>

        <% when 'fixed_version_id' %>

          <% if @issue.safe_attribute?('fixed_version_id') && @issue.assignable_versions.any? %>
            <p><%= f.select :fixed_version_id, version_options_for_select(@issue.assignable_versions, @issue.fixed_version), :include_blank => true, :required => @issue.required_attribute?('fixed_version_id') %>
              <%= link_to(l(:label_version_new),
                          new_project_version_path(@issue.project),
                          :remote => true,
                          :method => 'get',
                          :title => l(:label_version_new),
                          :tabindex => 200,
                          :class => 'icon-only icon-add'
                  ) if User.current.allowed_to?(:manage_versions, @issue.project) %>
            </p>
          <% end %>

        <% when 'parent_issue_id' %>

          <% if @issue.safe_attribute? 'parent_issue_id' %>
            <p id="parent_issue"><%= f.text_field :parent_issue_id, :size => 10, :required => @issue.required_attribute?('parent_issue_id') %></p>
            <%= javascript_tag "observeAutocompleteField('issue_parent_issue_id', '#{escape_javascript auto_complete_issues_path(:project_id => @issue.project, :scope => Setting.cross_project_subtasks, :status => @issue.closed? ? 'c' : 'o', :issue_id => @issue.id)}')" %>
          <% end %>

        <% when 'start_date' %>

          <% if @issue.safe_attribute? 'start_date' %>
            <p id="start_date_area">
              <%= f.date_field(:start_date, :size => 10, :required => @issue.required_attribute?('start_date')) %>
              <%= calendar_for('issue_start_date') %>
            </p>
          <% end %>

        <% when 'due_date' %>

          <% if @issue.safe_attribute? 'due_date' %>
            <p id="due_date_area">
              <%= f.date_field(:due_date, :size => 10, :required => @issue.required_attribute?('due_date')) %>
              <%= calendar_for('issue_due_date') %>
            </p>
          <% end %>

        <% when 'estimated_hours' %>

          <% if @issue.safe_attribute? 'estimated_hours' %>
            <p><%= f.hours_field :estimated_hours, :size => 3, :required => @issue.required_attribute?('estimated_hours') %> <%= l(:field_hours) %></p>
          <% end %>

        <% when 'done_ratio' %>

          <% if @issue.safe_attribute?('done_ratio') && Issue.use_field_for_done_ratio? %>
            <p><%= f.select :done_ratio, ((0..10).to_a.collect { |r| ["#{r * 10} %", r * 10] }), :required => @issue.required_attribute?('done_ratio') %></p>
          <% end %>

        <% end %>

      <% end %>

    </div>

    <% include_calendar_headers_tags %>

  </div>

  <%= call_hook(:view_issues_form_details_bottom, { :issue => @issue, :form => f }) %>
<% end %>

<% heads_for_wiki_formatter %>
<%= heads_for_auto_complete(@issue.project) %>

<%= javascript_tag do %>
  $(document).ready(function(){
  $("#issue_tracker_id, #issue_status_id").each(function(){
  $(this).val($(this).find("option[selected=selected]").val());
  });
  $(".assign-to-me-link").click(function(event){
  event.preventDefault();
  var element = $(event.target);
  $('#issue_assigned_to_id').val(element.data('id'));
  element.hide();
  });
  $('#issue_assigned_to_id').change(function(event){
  var assign_to_me_link = $(".assign-to-me-link");

  if (assign_to_me_link.length > 0) {
  var user_id = $(event.target).val();
  var current_user_id = assign_to_me_link.data('id');

  if (user_id == current_user_id) {
  assign_to_me_link.hide();
  } else {
  assign_to_me_link.show();
  }
  }
  });
  });
<% end %>

